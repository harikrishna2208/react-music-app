{"version":3,"sources":["components/MusicPlayerContext.js","components/UseMusicPlayer.js","components/TrackList.js","components/PlayerControls.js","App.js","serviceWorker.js","index.js","assets/creativeminds.mp3","assets/happyrock.mp3","assets/littleidea.mp3"],"names":["MusicPlayerContext","React","createContext","MusicPlayerProvider","props","useState","audioPlayer","Audio","tracks","name","file","creativeminds","happyrock","littleidea","currentTrackIndex","isPlaying","state","setState","Provider","value","children","UseMusicPlayer","useContext","PlayTrack","index","togglePlay","pause","play","currentTrackName","trackList","playPreviousTrack","length","playNextTrack","TrackList","UseMusicplayer","map","track","className","onClick","PlayerControls","useMusicPlayer","disabled","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.d65adbaa.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport creativeminds from \"../assets/creativeminds.mp3\";\nimport happyrock from \"../assets/happyrock.mp3\";\nimport littleidea from \"../assets/littleidea.mp3\";\nconst MusicPlayerContext = React.createContext([{}, () => {}]);\nconst MusicPlayerProvider = (props) => {\n  const [state, setState] = useState({\n    audioPlayer: new Audio(),\n    tracks: [\n      {\n        name: \"creativeminds\",\n        file: creativeminds,\n      },\n      {\n        name: \"happyrock\",\n        file: happyrock,\n      },\n      {\n        name: \"littleidea\",\n        file: littleidea,\n      },\n    ],\n    currentTrackIndex: null,\n    isPlaying: false,\n  });\n  return (\n    <MusicPlayerContext.Provider value={[state, setState]}>\n      {props.children}\n    </MusicPlayerContext.Provider>\n  );\n};\nexport { MusicPlayerContext, MusicPlayerProvider };\n","import { useContext } from \"react\";\nimport { MusicPlayerContext } from \"./MusicPlayerContext\";\n\nconst UseMusicPlayer = () => {\n  const [state, setState] = useContext(MusicPlayerContext);\n\n  function PlayTrack(index) {\n    if (index === state.currentTrackIndex) {\n      togglePlay();\n    } else {\n      state.audioPlayer.pause();\n      state.audioPlayer = new Audio(state.tracks[index].file);\n      state.audioPlayer.play();\n      setState((state) => ({\n        ...state,\n        currentTrackIndex: index,\n        isPlaying: true,\n      }));\n    }\n  }\n  function togglePlay() {\n    if (state.isPlaying) {\n      state.audioPlayer.pause();\n    } else {\n      state.audioPlayer.play();\n    }\n    setState((state) => ({ ...state, isPlaying: !state.isPlaying }));\n  }\n\n  function playPreviousTrack() {\n    const newIndex =\n      (((state.currentTrackIndex + 1) % state.tracks.length) +\n        state.tracks.length) %\n      state.tracks.length;\n    PlayTrack(newIndex);\n  }\n\n  function playNextTrack() {\n    const newIndex = (state.currentTrackIndex + 1) % state.tracks.length;\n    PlayTrack(newIndex);\n  }\n\n  return {\n    PlayTrack,\n    togglePlay,\n    currentTrackName:\n      state.currentTrackIndex !== null &&\n      state.tracks[state.currentTrackIndex].name,\n    trackList: state.tracks,\n    isPlaying: state.isPlaying,\n    playPreviousTrack,\n    playNextTrack,\n  };\n};\n\nexport default UseMusicPlayer;\n","import React from \"react\";\nimport UseMusicplayer from \"./UseMusicPlayer\";\nimport { BsPlayFill } from \"react-icons/bs\";\nimport { BsFillPauseFill } from \"react-icons/bs\";\n\nfunction TrackList() {\n  const {\n    trackList,\n    currentTrackName,\n    PlayTrack,\n    isPlaying,\n  } = UseMusicplayer();\n  return (\n    <>\n      {trackList.map((track, index) => (\n        <div className=\"box\">\n          <button className=\"button\" onClick={() => PlayTrack(index)}>\n            {currentTrackName === track.name && isPlaying ? (\n              <BsFillPauseFill />\n            ) : (\n              <BsPlayFill />\n            )}\n          </button>\n          <div className=\"song-title\">{track.name}</div>\n        </div>\n      ))}\n    </>\n  );\n}\nexport default TrackList;\n","import React from \"react\";\nimport useMusicPlayer from \"./UseMusicPlayer\";\nimport { BsPlayFill } from \"react-icons/bs\";\nimport { BsFillPauseFill } from \"react-icons/bs\";\nimport { BsFillSkipEndFill } from \"react-icons/bs\";\nimport { BsFillSkipStartFill } from \"react-icons/bs\";\n\nfunction PlayerControls() {\n  const {\n    togglePlay,\n    currentTrackName,\n    isPlaying,\n    playPreviousTrack,\n    playNextTrack,\n  } = useMusicPlayer();\n\n  return (\n    <>\n      <div className=\"box controls has-background-grey-dark\">\n        <div className=\"current-track has-text-light\">\n          <div>{currentTrackName}</div>\n        </div>\n        <div>\n          <button\n            className=\"button has-text-light has-background-grey-dark\"\n            onClick={playPreviousTrack}\n            disabled={!currentTrackName}\n          >\n            <BsFillSkipStartFill />\n          </button>\n          <button\n            className=\"button has-text-light has-background-grey-dark\"\n            onClick={togglePlay}\n            disabled={!currentTrackName}\n          >\n            {isPlaying ? <BsFillPauseFill /> : <BsPlayFill />}\n          </button>\n          <button\n            className=\"button has-text-light has-background-grey-dark\"\n            onClick={playNextTrack}\n            disabled={!currentTrackName}\n          >\n            <BsFillSkipEndFill />\n          </button>\n        </div>\n      </div>\n    </>\n  );\n}\nexport default PlayerControls;\n","import React from \"react\";\nimport Particles from \"react-particles-js\";\nimport { MusicPlayerProvider } from \"./components/MusicPlayerContext\";\nimport TrackList from \"./components/TrackList\";\nimport PlayerControls from \"./components/PlayerControls\";\nimport \"./css/index.css\";\nimport \"./css/App.css\";\n/**/\nfunction App() {\n  return (\n    <>\n      <div className=\"fordiv\">\n        <Particles className=\"particle-js\" />\n      </div>\n      <MusicPlayerProvider>\n        <div className=\"container\">\n          <TrackList />\n          <PlayerControls />\n        </div>\n      </MusicPlayerProvider>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./css/index.css\";\nimport 'bulma/css/bulma.css'\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/creativeminds.e175412e.mp3\";","module.exports = __webpack_public_path__ + \"static/media/happyrock.80276ac2.mp3\";","module.exports = __webpack_public_path__ + \"static/media/littleidea.bf0df2e2.mp3\";"],"sourceRoot":""}